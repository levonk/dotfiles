{
	"Chezmoi Sourceable Bash Script Template": {
		"prefix": "chezmoiSourceableBash",
		"body": [
			"#!/usr/bin/env bash",
			"# shellcheck shell=bash",
			"#{{ template \"_chezmoi_header.tmpl\" . }}",
			"",
			"# Minimum version: Bash ≥ 4.2 (for BASH_VERSINFO, associative arrays, `readonly`, `errtrace`)",
			"if ((BASH_VERSINFO[0] < 4 || (BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] < 2))); then",
			"  echo \"ERROR: Bash ≥ 4.2 required. Current: $BASH_VERSION\" >&2",
			"  return 1 2>/dev/null || exit 1",
			"fi",
			"",
			"# Prevent double-sourcing",
			"if [ -n \"${__SOURCEABLE_BASH_LOADED:-}\" ]; then return 0; fi",
			"readonly __SOURCEABLE_BASH_LOADED=1",
			"",
			"# Get the path of the current script (reliable for Bash when sourced)",
			"SCRIPT=\"${BASH_SOURCE[0]}\"",
			"",
			"# Warn and auto-remove executable bit if the script itself is executable",
			"if [ -x \"$SCRIPT\" ]; then",
			"  echo \"WARNING: '$SCRIPT' is executable. Removing executable bit.\" >&2",
			"  chmod -x \"$SCRIPT\" || echo \"ERROR: Failed to chmod -x '$SCRIPT'\" >&2",
			"fi",
			"",
			"# Fail if executed directly (i.e., not sourced)",
			"if [[ \"$SCRIPT\" == \"$0\" ]]; then",
			"  echo \"ERROR: This .bash script must be sourced, not executed. Path: '$SCRIPT'\" >&2",
			"  exit 1",
			"fi",
			"",
			"# Fail if not sourced in Bash",
			"if [ -z \"${BASH_VERSION:-}\" ]; then",
			"  echo \"ERROR: This .bash script must be sourced inside Bash.\" >&2",
			"  return 1 2>/dev/null || exit 1",
			"fi",
			"",
			"# Strict behavior: exit on error, treat unset variables as error, fail if any command in a pipeline fails, inherit ERR trap in functions",
			"set -o errexit -o nounset -o pipefail -o errtrace",
			"",
			"# Trap errors during sourcing",
			"trap 'echo \"ERROR: Sourcing failed at line $LINENO in '$SCRIPT'\"; return 1 2>/dev/null || exit 1' ERR",
			"",
			"# Check if script is in expected XDG_CONFIG_HOME/shells directory",
			"_XDG_CONFIG_HOME_DEFAULT=\"${HOME}/.config\"",
			"_CONFIG_DIR=\"${XDG_CONFIG_HOME:-${_XDG_CONFIG_HOME_DEFAULT}}\"",
			"_EXPECTED_BASH_DIR=\"${_CONFIG_DIR}/shells/bash/\"",
			"_EXPECTED_SHARED_DIR=\"${_CONFIG_DIR}/shells/shared/\"",
			"",
			"if [[ \"${SCRIPT}\" != \"${_EXPECTED_BASH_DIR}\"* ]] && \\",
			"   [[ \"${SCRIPT}\" != \"${_EXPECTED_SHARED_DIR}\"* ]]; then",
			"  echo \"WARNING: This .bash script is recommended to be in '${_EXPECTED_BASH_DIR}' or '${_EXPECTED_SHARED_DIR}' for proper management and organization. Current path: '${SCRIPT}'\" >&2",
			"fi",
			"unset _XDG_CONFIG_HOME_DEFAULT _CONFIG_DIR _EXPECTED_BASH_DIR _EXPECTED_SHARED_DIR",
			"",
			"# --- Script logic starts here ---",
			"{{ .cursor }}",
			"# Example: readonly CONFIG_PATH=\"$HOME/.config/mytool/config.bash\"",
			"# Example: Add your bash-specific functions and aliases below.",
			""
		],
		"description": "Chezmoi template for a sourceable Bash script with safety checks"
	},
	"Chezmoi Sourceable Zsh Script Template": {
		"prefix": "chezmoiSourceableZsh",
		"body": [
			"#!/usr/bin/env zsh",
			"# shellcheck shell=zsh",
			"#{{ template \"_chezmoi_header.tmpl\" . }}",
			"",
			"# Minimum version: Zsh ≥ 5.0 (for `${(%):-%N}`, `readonly`, `trap`)",
			"autoload -Uz is-at-least",
			"if ! is-at-least 5.0; then",
			"  echo \"ERROR: Zsh ≥ 5.0 required. Current: $ZSH_VERSION\" >&2",
			"  return 1 2>/dev/null || exit 1",
			"fi",
			"",
			"# Prevent double-sourcing",
			"if [ -n \"${__SOURCEABLE_ZSH_LOADED:-}\" ]; then return 0; fi",
			"readonly __SOURCEABLE_ZSH_LOADED=1",
			"",
			"# Get the path of the current script (reliable for Zsh when sourced)",
			"SCRIPT=\"${(%):-%N}\"",
			"",
			"# Warn and auto-remove executable bit if the script itself is executable",
			"if [ -x \"$SCRIPT\" ]; then",
			"  echo \"WARNING: '$SCRIPT' is executable. Removing executable bit.\" >&2",
			"  chmod -x \"$SCRIPT\" || echo \"ERROR: Failed to chmod -x '$SCRIPT'\" >&2",
			"fi",
			"",
			"# Fail if executed directly (i.e., not sourced)",
			"if [[ \"$SCRIPT\" == \"$0\" ]]; then",
			"  echo \"ERROR: This .zsh script must be sourced, not executed. Path: '$SCRIPT'\" >&2",
			"  exit 1",
			"fi",
			"",
			"# Fail if not sourced in Zsh",
			"if [ -z \"${ZSH_VERSION:-}\" ]; then",
			"  echo \"ERROR: This .zsh script must be sourced inside Zsh.\" >&2",
			"  return 1 2>/dev/null || exit 1",
			"fi",
			"",
			"# Strict behavior: exit on error, treat unset variables as error, fail if any command in a pipeline fails, return non-zero on error",
			"setopt errexit nounset pipefail err_return",
			"",
			"# Trap errors during sourcing",
			"TRAPERR() {",
			"  echo \"ERROR: Sourcing failed at line $LINENO in '$SCRIPT'\" >&2",
			"  return 1",
			"}",
			"",
			"# Check if script is in expected XDG_CONFIG_HOME/shells directory",
			"_XDG_CONFIG_HOME_DEFAULT=\"${HOME}/.config\"",
			"_CONFIG_DIR=\"${XDG_CONFIG_HOME:-${_XDG_CONFIG_HOME_DEFAULT}}\"",
			"_EXPECTED_ZSH_DIR=\"${_CONFIG_DIR}/shells/zsh/\"",
			"_EXPECTED_SHARED_DIR=\"${_CONFIG_DIR}/shells/shared/\"",
			"",
			"if [[ \"${SCRIPT}\" != \"${_EXPECTED_ZSH_DIR}\"* ]] && \\",
			"   [[ \"${SCRIPT}\" != \"${_EXPECTED_SHARED_DIR}\"* ]]; then",
			"  echo \"WARNING: This .zsh script is recommended to be in '${_EXPECTED_ZSH_DIR}' or '${_EXPECTED_SHARED_DIR}' for proper management and organization. Current path: '${SCRIPT}'\" >&2",
			"fi",
			"unset _XDG_CONFIG_HOME_DEFAULT _CONFIG_DIR _EXPECTED_ZSH_DIR _EXPECTED_SHARED_DIR",
			"",
			"# --- Script logic starts here ---",
			"{{ .cursor }}",
			"# Example: readonly CONFIG_PATH=\"$HOME/.config/mytool/config.zsh\"",
			"# Example: Add your zsh-specific functions and aliases below.",
			""
		],
		"description": "Chezmoi template for a sourceable Zsh script with safety checks"
	},
	"Chezmoi Sourceable POSIX Sh Script Template": {
		"prefix": "chezmoiSourceableSh",
		"body": [
			"#!/usr/bin/env sh",
			"# shellcheck shell=sh",
			"#{{ template \"_chezmoi_header.tmpl\" . }}",
			"",
			"# Prevent double-sourcing (must be early, before other logic that might cause side effects)",
			"if [ -n \"${__SOURCEABLE_SH_LOADED:-}\" ]; then return 0; fi",
			"__SOURCEABLE_SH_LOADED=1",
			"",
			"# --- Shell Type and Sourcing/Execution Checks ---",
			"",
			"# Fail if executed directly by path (e.g., ./script.sh).",
			"# If executed directly, $0 will contain a path.",
			"# If sourced, $0 will be the name of the shell (e.g., bash, zsh).",
			"_SOURCED_SCRIPT_PATH=\"\" # Will hold the actual path of this script if sourced",
			"",
			"case \"$0\" in",
			"  */*)",
			"    # This means the script was executed directly.",
			"    _EXECUTED_SCRIPT_PATH=\"$0\"",
			"    if [ -x \"${_EXECUTED_SCRIPT_PATH}\" ]; then",
			"      echo \"WARNING: '${_EXECUTED_SCRIPT_PATH}' is executable. Removing executable bit.\" >&2",
			"      chmod -x \"${_EXECUTED_SCRIPT_PATH}\" || echo \"ERROR: Failed to chmod -x '${_EXECUTED_SCRIPT_PATH}'\" >&2",
			"    fi",
			"    echo \"ERROR: This .sh script must be sourced, not executed. Path: '${_EXECUTED_SCRIPT_PATH}'\" >&2",
			"    exit 1",
			"    ;;",
			"  *)",
			"    # Not executed directly by path. This is good for sourcing.",
			"    # Now, determine the actual script path if sourced within Bash/Zsh.",
			"    # Pure POSIX sh cannot reliably get the path of a sourced script itself.",
			"    if [ -n \"${BASH_VERSION:-}\" ]; then",
			"      _SOURCED_SCRIPT_PATH=\"${BASH_SOURCE[0]}\"",
			"    elif [ -n \"${ZSH_VERSION:-}\" ]; then",
			"      _SOURCED_SCRIPT_PATH=\"${(%):-%N}\"",
			"    fi",
			"    ;;",
			"esac",
			"",
			"# Fail if not sourced in Bash or Zsh (as per user example for .sh)",
			"if [ -z \"${BASH_VERSION:-}\" ] && [ -z \"${ZSH_VERSION:-}\" ]; then",
			"  echo \"ERROR: This .sh script must be sourced inside Bash or Zsh.\" >&2",
			"  return 1 2>/dev/null || exit 1",
			"fi",
			"",
			"# Strict behavior (POSIX-compliant)",
			"set -o errexit -o nounset -o pipefail",
			"",
			"# Trap errors (note: 'ERR' trap is not strictly POSIX, but common in modern shells",
			"# and included in the user's example for sh. If using a very minimal sh, this might not work.)",
			"trap 'echo \"ERROR: Sourcing failed\"; return 1 2>/dev/null || exit 1' ERR",
			"",
			"# Check if script is in expected XDG_CONFIG_HOME/shells/shared directory",
			"if [ -n \"${_SOURCED_SCRIPT_PATH:-}\" ]; then # Only check if we could determine the sourced path",
			"  _XDG_CONFIG_HOME_DEFAULT=\"${HOME}/.config\"",
			"  _CONFIG_DIR=\"${XDG_CONFIG_HOME:-${_XDG_CONFIG_HOME_DEFAULT}}\"",
			"  _EXPECTED_SHARED_DIR=\"${_CONFIG_DIR}/shells/shared/\"",
			"",
			"  # Use portable substring check for sh",
			"  if [ \"${_SOURCED_SCRIPT_PATH#${_EXPECTED_SHARED_DIR}}\" = \"${_SOURCED_SCRIPT_PATH}\" ]; then",
			"    echo \"WARNING: This .sh script is recommended to be in '${_EXPECTED_SHARED_DIR}' for proper management and organization. Current path: '${_SOURCED_SCRIPT_PATH}'\" >&2",
			"  fi",
			"  unset _XDG_CONFIG_HOME_DEFAULT _CONFIG_DIR _EXPECTED_SHARED_DIR",
			"fi",
			"",
			"unset _EXECUTED_SCRIPT_PATH _SOURCED_SCRIPT_PATH # Clean up temporary variables",
			"",
			"# --- Script logic starts here ---",
			"{{ .cursor }}",
			"# Example: readonly CONFIG_PATH=\"$HOME/.config/mytool/config.sh\"",
			"# Example: Add your POSIX sh-specific functions and aliases below.",
			""
		],
		"description": "Chezmoi template for a sourceable POSIX sh script with safety checks"
	}
}
