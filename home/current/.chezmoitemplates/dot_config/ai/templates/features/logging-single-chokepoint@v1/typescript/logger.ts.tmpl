// src/infra/logging/logger.ts
// Generated by feature: logging-single-chokepoint@v1

export type LogLevel = 'debug' | 'info' | 'warn' | 'error';

export interface LogContext {
  component?: string;
  [key: string]: unknown;
}

let currentLevel: LogLevel = 'info';

const levelOrder: Record<LogLevel, number> = {
  debug: 10,
  info: 20,
  warn: 30,
  error: 40,
};

export function setLevel(level: LogLevel) {
  currentLevel = level;
}

function enabled(level: LogLevel) {
  return levelOrder[level] >= levelOrder[currentLevel];
}

export function log(level: LogLevel, message: string, ctx: LogContext = {}) {
  if (!enabled(level)) return;
  const record = { ts: new Date().toISOString(), level, message, ...ctx };
  // Default sink: JSON to stdout
  process.stdout.write(JSON.stringify(record) + '\n');
}

export const logger = {
  debug: (m: string, c?: LogContext) => log('debug', m, c),
  info: (m: string, c?: LogContext) => log('info', m, c),
  warn: (m: string, c?: LogContext) => log('warn', m, c),
  error: (m: string, c?: LogContext) => log('error', m, c),
  setLevel,
};
