---
description: Shared task definitions, numbering, and file formats for workflows
---
# Shared Task Definitions and Formats

## Numbering Scheme and Branch Naming

- Use this numbering scheme:
  - Parallel stories: can be developed simultaneously within the same sequential phase.
  - Sequential phases: phases must be completed in order; each phase contains a set of parallel stories.
- For each story, include:
  - Story ID: `PP-III` where `PP` is 2-digit phase, `III` is 3-digit parallel index (e.g., `01-001`).
  - Worktree branch name: `feature/current/[PRD-NAME-KEBAB-CASE]/story-[PP]-[III]-[STORY-NAME-KEBAB-CASE]`.
  - Dependencies: prior stories (e.g., `01-001, 01-002`).
  - Parallel safe: `true/false`.
  - Modules/areas impacted: call out directories or services to minimize conflicts.

### Example Structure of Index File

```markdown
| Story ID | Story Title | Branch | Dependencies | Parallel-safe | Modules |
| -------- | ----------- | ------ | ------------ | ------------- | ------- |
| 01-001 | [Story Title] | feature/current/[[PRD-NAME-KEBAB-CASE]]/[[story-01-001-STORY-NAME-KEBAB-CASE]] | None | Parallel-safe: true | [[module-a]] |
| 01-002 | [Story Title] | feature/current/[[PRD-NAME-KEBAB-CASE]]/[[story-01-002-STORY-NAME-KEBAB-CASE]] | None | Parallel-safe: true | [[module-b]] |
| 01-003 | [Story Title] | feature/current/[[PRD-NAME-KEBAB-CASE]]/[[story-01-003-STORY-NAME-KEBAB-CASE]] | None | Parallel-safe: true | [[module-c]] |
| 02-001 | [Story Title] | feature/current/[[PRD-NAME-KEBAB-CASE]]/[[story-02-001-STORY-NAME-KEBAB-CASE]] | 01-001, 01-002 | Parallel-safe: true | [[module-a]] |
| 02-002 | [Story Title] | feature/current/[[PRD-NAME-KEBAB-CASE]]/[[story-02-002-STORY-NAME-KEBAB-CASE]] | 01-001, 01-003 | Parallel-safe: true | [[module-b]] |
| 03-001 | [Story Title] | feature/current/[[PRD-NAME-KEBAB-CASE]]/[[story-03-001-STORY-NAME-KEBAB-CASE]] | 01-002, 02-001 | Parallel-safe: false | [[module-x]] |
```

## Output Format

The generated task list must follow this structure:

```markdown
## Relevant Files

- `path/to/potential/file1.mts` - Brief description of why this file is relevant (e.g., Contains the main component for this feature).
- `path/to/file1.test.mts` - Unit tests for `file1.mts`.
- `path/to/another/file.mts` - Brief description (e.g., API route handler for data submission).
- `path/to/another/file.test.mts` - Unit tests for `another/file.mts`.
- `lib/utils/helpers.mts` - Brief description (e.g., Utility functions needed for calculations).
- `lib/utils/helpers.test.mts` - Unit tests for `helpers.mts`.

### Notes

- Unit tests should typically be placed alongside the code files they are testing (e.g., `MyComponent.mts` and `MyComponent.test.mts` in the same directory).
- Use `bun run jest [optional/path/to/test/file]` to run tests. Running without a path executes all tests found by the Jest configuration.
```

## Per-Story File Template (with YAML front matter)

Each story file must begin with YAML front matter followed by a structured body. Save files to `internal-docs/feature/[PRD-NAME-KEBAB-CASE]/tasks/` as `tasks-[PRD-NAME-KEBAB-CASE]-[PP]-[III]-[STORY-TITLE-KEBAB-CASE].md`.

```yaml
---
story_id: "PP-III"            # e.g., "01-001"
story_title: "<story title>"
story_name: "<STORY-NAME-KEBAB-CASE>"
prd_name: "<PRD-NAME-KEBAB-CASE>"  # e.g., user-handling
prd_file: "internal-docs/feature/<PRD-NAME-KEBAB-CASE>/prd.md"
phase: 1                      # 2-digit sequential phase as integer
parallel_id: 1                # 3-digit parallel index as integer
branch: "feature/current/<PRD-NAME-KEBAB-CASE>/story-PP-III-<STORY-NAME-KEBAB-CASE>"
status: "todo"               # todo | in_progress | blocked | done | archive
assignee: ""
reviewer: ""
dependencies: ["01-001"]     # list of story_ids
parallel_safe: true
modules: ["module-a"]
priority: "MUST"             # MUST | SHOULD | COULD | WONT
risk_level: "medium"          # low | medium | high
tags: ["feat", "backend"]
due: "YYYY-MM-DD"
create-date: "YYYY-MM-DD"
update-date: "YYYY-MM-DD"
---
## Summary

One-paragraph description of the story, intent, and scope boundaries.

## Sub-Tasks

- [ ] Task 1 — scope and target files
- [ ] Task 2 — scope and target files

Status conventions: mark in-progress with `[~]`, done with `[x]`, blocked with `[!]`.

## Relevant Files

- `path/to/file.mts` — why relevant
- `path/to/file.test.mts` — tests for the above

## Acceptance Criteria

- [ ] Criterion 1
- [ ] Criterion 2

## Test Plan

- Unit: `bun run jest [optional/path]`
- Lint: `bun run lint` (or equivalent)
- Types: `bun run typecheck` (or equivalent)

## Observability

- Logging, metrics, traces to add; dashboards/alerts to update

## Compliance

- Note regulatory/privacy constraints; data handling; retention

## Risks & Mitigations

- Risk: … — Mitigation: …

## Dependencies & Sequencing

- Depends on:
  - [[story-01-001-STORY-NAME-KEBAB-CASE]]
  - [[story-01-002-STORY-NAME-KEBAB-CASE]]
- Unblocks:
  - [[story-02-002-STORY-NAME-KEBAB-CASE]]

## Definition of Done

- Code, tests, docs updated; CI green; dashboard and story file updated

## Commit Conventions

- Use conventional commits with module scoping, e.g., `feat(moduleA): …`
```
