---
description: Handle unadded/uncommitted files in repository
auto_execution_mode: 1
---

## Steps

1. Make sure all editor buffers have been saved, and the editor sees exactly what is on disk.
2. if you're in windows, and `wsl` is installed, use `wsl` to do your git commands.
3. If the project has a `git-status-digest.sh` in the `$PATH`, `scripts`, or `bin` directory, run it. If not do the following:
	1. Do a `git status --untracked-files=all --porcelain` in the current directory, OR the directory I tell you to use. Do not rely on your internal index. I'm not interested in just checking in the last thing you worked on, I'm asking you to get me to a repository with no untracked or uncommitted files.
	2. Look at the files within all repositories that have been changed and not committed OR that are new to the project.
	3. ALWAYS double-check for untracked files, staged files, and unstaged files before concluding clean repo
	4. if the user is configured to sign commits, don't forget to sign the commit when doing it. If not don't try signing again, and repeat.
4. Scan for any secrets or private information before committing; if any are found, stop and notify the user immediately.
5. run any linter, formatter, and finally unit tests that are available on the system, if not stop trying to run that tool.
	1. If you aren't 96% confident you understand the change, ask for clarification.
	2. Understand the changes, and try to group them in unique
	changesets that make sense so multiple changes get multiple
	commits. e.g. changes to login page, and it's associated confg,
	documentation, typescript, css, dependency listing changes,
	test code, is all one commit, and changes to settings page and
	it's associated database files, css, typescript, test code,
	is all ONE different commit.
6. Properly format commits, if `git config --get commit.template` is set, use it, else use the template below.
7. summarize what you did, and if anything needs the USER's attention.
8. DO NOT `git push`, unless specifically asked to

## Guidelines

- Use the imperitive mood: "Add checkbox" not "Added checkbox"
- Group the changes by functionality, not file types. i.e. dont make a commit labeled "code files", and another named "test files", but commits by user facing functionality like "login page", and "settings page" which cuts across file types.
- Be specific: "fix overflow in sidebar menu" is better than "fix bug"
- Explain the why: Not just what changed, but why it was needed.
- Avoid filler Skip vague phrases like "oops" or "maybe fixed"
- Capitalize the subject and omit punctuation
- Avoid commiting half done work
- Always use LF for commit messages, NOT CRLF


12. After all commits are processed, do the git status again, to verify there are no untracked, modified, or uncommitted files. If there are repeat the process starting from step 0.

13. Do a `git log --stat` for the new commits

14. summarize how many commits you made, how many files totoal, and avg, min, max number of files. Then list comments need the USER's attention.

## Commit Template

```markdown
{{- include "dot_config/git/commit-template.md" -}}
```
