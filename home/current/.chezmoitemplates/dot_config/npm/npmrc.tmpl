##############################################################################
#####  !!!! This file is managed by `chezmoi` do not edit directly !!!!  #####
##############################################################################

## (Unified Configuration for npm, pnpm, and Yarn) INI format 

## https://docs.npmjs.com/cli/v11/using-npm/config
## You must set `$NPM_CONFIG_USERCONFIG` or pass the
##     argument `--userconfig $XDG_CONFIG_HOME/npm/npmrc` to use this
# ~/.npmrc

## https://pnpm.io/settings
# ~/.config/pnpm/rc (INI Format)


# ============================================================================
# General Configuration
# ============================================================================

# Directory for global installations (npm, Yarn).  pnpm does not use this.
prefix=${XDG_DATA_HOME}/npm

# Proxy settings (npm, Yarn).  Specifies an HTTP proxy server to use for npm requests. Useful if you are behind a firewall.
#https-proxy=http://your-proxy-here:8080/

# Registry URL (npm, pnpm, Yarn).
# The default is the public npm registry (https://registry.npmjs.org/).
#   You might want to change this if you are using a private registry or a mirror for faster downloads.
registry=https://registry.npmjs.org/

# Cache directory (npm, Yarn).  pnpm uses store-dir and cache-dir.
# Specifies the directory where npm will store downloaded packages. 
# Setting this explicitly, especially in CI/CD environments, can
# improve performance.
cache=${XDG_CACHE_HOME}/npm

# npm init configuration file (npm).  Ignored by pnpm and Yarn.
init-module=${XDG_CONFIG_HOME}/npm/config/npm-init.js

# Temporary directory (npm, Yarn).
tmp=${XDG_RUNTIME_DIR}/npm

# pnpm content-addressable store (pnpm only).
# defines the location of the content-addressable storage where pnpm saves
# all downloaded packages. This is a central part of pnpm's efficient disk space usage.
store-dir=${XDG_DATA_HOME}/pnpm/store/pnpm-store-v3

# pnpm HTTP cache directory (pnpm only).
cache-dir=${XDG_CACHE_DIR}/pnpm-cache

# Enable lockfile (pnpm, Yarn).  npm uses package-lock.json.
lockfile=true

# Include tarball in lockfile (pnpm). No effect in npm or Yarn.
lockfile-include-tarball=true

# ============================================================================
#  Behavior
# ============================================================================

# Always require authentication (npm, pnpm, Yarn).
always-auth=false

# Save exact versions (npm, pnpm, Yarn).
save-exact=true

# Prevents package-lock.json updates when installing a single package (npm).  No effect in pnpm or Yarn.
save=false

# Logging level (npm, pnpm, Yarn).
loglevel=warn

# Colorize output (npm, pnpm, Yarn).
color=true

# Show progress bar (npm, pnpm, Yarn).
progress=true

# ============================================================================
#  Security
# ============================================================================

# Audit for vulnerabilities (npm, pnpm, Yarn).
audit=true

# Minimum vulnerability level to fail audit (npm, pnpm, Yarn).
# Specifies the minimum severity level of vulnerabilities that will cause the audit to fail.
audit-level=high

# Enable package provenance (npm >= v9).  Ignored by pnpm and Yarn.
provenance=true

# Enforce strict peer dependencies (pnpm).  Yarn has similar behavior. npm is less strict by default.
strict-peer-dependencies=true

# ============================================================================
#  Publishing
# ============================================================================

# Publishing tag (npm, pnpm, Yarn).
tag=latest

# Package access level (npm, pnpm, Yarn).
access=public

# ============================================================================
#  Package Management (Filtering)
# ============================================================================

# Ignore specific packages during install (pnpm, Yarn).  Not directly supported by npm config.
# ignored-dependencies[]=lodash
# ignored-dependencies[]=jquery

# ============================================================================
# Filtering
# ============================================================================

# Only install production dependencies (npm, pnpm, Yarn).
# only-prod=true

# ============================================================================
#  Node-gyp (for native modules)
# ============================================================================

#  Specify the Python executable to use for node-gyp (if needed)
# python=$(pyenv which python)

# ============================================================================
#  Node Modules - OVERRIDED setting needs to be Unique per config
# ============================================================================

# node-linker: This option is crucial for controlling how node_modules are structured.
#    - hoisted: (Recommended `pnpm`) Creates a flat node_modules structure by hoisting dependencies. This generally provides the best compatibility. Use symlinks (faster, more efficient).
#    - isolated: Creates a fully isolated node_modules structure for each package. This can improve reproducibility but may lead to compatibility issues.
#    - pnp: (Recommended `Yarn`) Enables Plug'n'Play
# n/a in npm, yarn classic, bun
# `hoisted` in pnpm
# `pnp` in Yarn Berry, but it has it's own config file or references ~/.npmrc which we're not using
node-linker=hoisted