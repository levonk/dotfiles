#!/usr/bin/env bash
{{ if and (ne .chezmoi.os "windows") (ne .chezmoi.os "unknown") }}
# shellcheck shell=bash
# vim: set filetype=bash:
# {{ includeTemplate "dot_config/ai/templates/shell/executable_executable.bash.tmpl"}}
# Cross-platform package installer (mise)
# Runs once via chezmoi. Installs shared and OS-specific packages using the
# available package manager. Best-effort, idempotent as much as the PM allows.
#
# Controls:
#   CHEZMOI_INSTALL_PKGS=1   -> enable (default 1)
#
set -euo pipefail

: "${CHEZMOI_INSTALL_PKGS:=1}"

#############################################
# Developer tools via mise (bun, bats, etc.)
#############################################

# Ensure mise exists; install to ~/.local/bin if missing (non-fatal on failure)
ensure_mise() {
  if command -v mise >/dev/null 2>&1; then
    return 0
  fi
  log "mise not found; attempting install"
  INSTALLER_URL="https://mise.jdx.dev/install.sh"
  if command -v curl >/dev/null 2>&1; then
    run sh -c "curl -fsSL \"$INSTALLER_URL\" | sh" || warn "Failed to install mise via curl"
  elif command -v wget >/dev/null 2>&1; then
    run sh -c "wget -qO- \"$INSTALLER_URL\" | sh" || warn "Failed to install mise via wget"
  else
    warn "Neither curl nor wget available to install mise"
  fi
}

# Initialize mise env in this shell if possible (don’t fail hard if it can’t)
init_mise_env() {
  if command -v mise >/dev/null 2>&1; then
    # shellcheck disable=SC1090
    eval "$(mise env -s bash 2>/dev/null)" || true
  fi
}

# Ensure a mise plugin and install a tool if not present
ensure_mise_tool() {
  local plugin="$1" version_spec="${2:-latest}"
  if ! mise plugins | awk '{print $1}' | grep -qx "$plugin" 2>/dev/null; then
    run mise plugins add "$plugin" || warn "Failed adding mise plugin: $plugin"
  fi
  # Install and set as global (idempotent)
  run mise install "${plugin}@${version_spec}" || warn "mise install failed: ${plugin}@${version_spec}"
  run mise use -g "${plugin}@${version_spec}" || true
}

# Ensure bun is available for bunx usage
ensure_bun() {
  if command -v bun >/dev/null 2>&1; then
    return 0
  fi
  if command -v mise >/dev/null 2>&1; then
    log "Installing bun via mise"
    ensure_mise_tool bun latest
  else
    warn "mise not available; cannot ensure bun"
  fi
}

# Ensure bats is available; prefer native binary from mise, else shim via bunx
ensure_bats() {
  if command -v bats >/dev/null 2>&1; then
    return 0
  fi
  if command -v mise >/dev/null 2>&1; then
    log "Installing bats via mise"
    ensure_mise_tool bats latest
  fi
  if ! command -v bats >/dev/null 2>&1; then
    # Fallback shim using bunx so `bats` works even without a global install
    ensure_bun
    local shim="$HOME/.local/bin/bats"
    run mkdir -p "$(dirname "$shim")"
    if [[ ! -f "$shim" ]]; then
      if [[ "$CHEZMOI_PKGS_DRY_RUN" == "1" ]]; then
        log "Skipping bats shim creation during dry run: $shim"
      else
        cat > "$shim" <<'EOSH'
#!/usr/bin/env bash
set -euo pipefail
exec bunx --silent bats "$@"
EOSH
        run chmod +x "$shim" || true
        log "Installed bats shim using bunx at $shim"
      fi
    fi
  fi
}

# Perform tool bootstrap
ensure_mise
init_mise_env
if command -v mise >/dev/null 2>&1; then
  ensure_mise_tool neovim latest
  ensure_bun
  ensure_bats
else
  warn "Skipping mise-managed tools since mise is unavailable"
fi

log "Package installation step completed."
exit 0
{{ end }}
