#!/usr/bin/env sh
# shellcheck shell=sh
#{{ includeTemplate "meta/chezmoi-managed-header.md.tmpl" (dict "style" "shell") }}

# Prevent double-sourcing (hash-based, robust across call chains). Must be early.
{{ includeTemplate "dot_config/ai/templates/shell/2include_guard_fn.sh.tmpl" }}

# Provide a key for the include guard as an argument to `include_guard_once` {{ "{{" -}} .cursor {{- "}}" }}
include_guard_once
if [ "${INCLUDE_GUARD_ALREADY:-0}" = "1" ]; then return 0; fi

# --- Shell Type and Sourcing/Execution Checks ---

# Fail if executed directly by path (e.g., ./script.sh).
# If executed directly, $0 will contain a path.
# If sourced, $0 will be the name of the shell (e.g., bash, zsh).
_SOURCED_SCRIPT_PATH="" # Will hold the actual path of this script if sourced

case "$0" in
  */*)
    # This means the script was executed directly.
    _EXECUTED_SCRIPT_PATH="$0"
    if [ -x "${_EXECUTED_SCRIPT_PATH}" ]; then
      echo "WARNING: '${_EXECUTED_SCRIPT_PATH}' is executable. Removing executable bit." >&2
      chmod -x "${_EXECUTED_SCRIPT_PATH}" || echo "ERROR: Failed to chmod -x '${_EXECUTED_SCRIPT_PATH}'" >&2
    fi
    echo "ERROR: This .sh script must be sourced, not executed. Path: '${_EXECUTED_SCRIPT_PATH}'" >&2
    exit 1
    ;;
  *)
    # Not executed directly by path. This is good for sourcing.
    ;;
esac

{{ includeTemplate "dot_config/ai/templates/shell/includes/get_script_path.sh.tmpl" }}

# Fail if not sourced in Bash or Zsh (shared include)
{{ includeTemplate "dot_config/ai/templates/shell/includes/require_bash_or_zsh_sourced.tmpl" }}

# Strict/trap (shared include)
{{ includeTemplate "dot_config/ai/templates/shell/includes/strict_and_trap.sh.tmpl" }}

# Expected location check (shared include)
{{ includeTemplate "dot_config/ai/templates/shell/includes/expected_location_check.sh.tmpl" }}

unset _EXECUTED_SCRIPT_PATH _SOURCED_SCRIPT_PATH # Clean up temporary variables

# Load reusable guard_env_var function (masked by default; supports nomask)
{{ includeTemplate "dot_config/ai/templates/shell/var_guard_fn.sh.tmpl" }}

################################################################################
# --- Script logic starts here ---
################################################################################
# Example: Add your zsh-specific functions and aliases below.

# Example uses: Guard and set variables (no-op if already equals default)
# {{ "{{" -}} .cursor {{- "}}" }}
guard_env_var MY_VAR "default value changeme"

# Cleanup: Restore original SHELLOPTS and HISTFILE if needed

################################################################################
# --- End of Script ---
################################################################################

# End of script.
