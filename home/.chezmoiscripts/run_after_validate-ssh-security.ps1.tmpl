{{- if eq .chezmoi.os "windows" -}}
# Validate SSH security configuration and warn about potential risks
# This script runs after chezmoi applies SSH configurations

$ErrorActionPreference = "Stop"

$SshConfig = Join-Path $env:USERPROFILE ".ssh\config"
$KnownHosts = Join-Path $env:USERPROFILE ".ssh\known_hosts"

Write-Host "üîí SSH Security Validation" -ForegroundColor Cyan
Write-Host "==========================" -ForegroundColor Cyan

# Check if SSH config exists
if (-not (Test-Path $SshConfig)) {
    Write-Host "‚ùå SSH config not found at $SshConfig" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ SSH config found at $SshConfig" -ForegroundColor Green

# Function to check SSH configuration security
function Test-SshSecurity {
    $issues = 0
    $configContent = Get-Content $SshConfig -Raw
    
    Write-Host ""
    Write-Host "üîç Checking SSH security configuration..." -ForegroundColor Yellow
    
    # Check for Protocol 2
    if ($configContent -notmatch "Protocol 2") {
        Write-Host "‚ö†Ô∏è  WARNING: SSH Protocol version not explicitly set to 2" -ForegroundColor Yellow
        Write-Host "   Risk: May allow insecure SSH protocol version 1" -ForegroundColor Gray
        $issues++
    } else {
        Write-Host "‚úÖ SSH Protocol 2 enforced" -ForegroundColor Green
    }
    
    # Check for secure ciphers
    if ($configContent -match "Ciphers.*chacha20-poly1305") {
        Write-Host "‚úÖ Modern ciphers configured (ChaCha20-Poly1305)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  WARNING: Modern ciphers not found in configuration" -ForegroundColor Yellow
        Write-Host "   Risk: May use weaker encryption algorithms" -ForegroundColor Gray
        $issues++
    }
    
    # Check for secure MACs
    if ($configContent -match "MACs.*hmac-sha2") {
        Write-Host "‚úÖ Secure MAC algorithms configured" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  WARNING: Secure MAC algorithms not configured" -ForegroundColor Yellow
        Write-Host "   Risk: May use weaker message authentication" -ForegroundColor Gray
        $issues++
    }
    
    # Check for secure key exchange
    if ($configContent -match "KexAlgorithms.*curve25519") {
        Write-Host "‚úÖ Secure key exchange algorithms configured (Curve25519)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  WARNING: Secure key exchange algorithms not found" -ForegroundColor Yellow
        Write-Host "   Risk: May use weaker key exchange methods" -ForegroundColor Gray
        $issues++
    }
    
    # Check for Ed25519 host keys
    if ($configContent -match "HostKeyAlgorithms.*ssh-ed25519") {
        Write-Host "‚úÖ Ed25519 host key algorithms preferred" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  WARNING: Ed25519 host key algorithms not prioritized" -ForegroundColor Yellow
        Write-Host "   Risk: May use weaker host key algorithms" -ForegroundColor Gray
        $issues++
    }
    
    # Check for agent forwarding disabled
    if ($configContent -match "ForwardAgent no") {
        Write-Host "‚úÖ SSH agent forwarding disabled (secure)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  WARNING: SSH agent forwarding not explicitly disabled" -ForegroundColor Yellow
        Write-Host "   Risk: Potential agent forwarding attacks" -ForegroundColor Gray
        $issues++
    }
    
    # Check for X11 forwarding disabled
    if ($configContent -match "ForwardX11 no") {
        Write-Host "‚úÖ X11 forwarding disabled (secure)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  WARNING: X11 forwarding not explicitly disabled" -ForegroundColor Yellow
        Write-Host "   Risk: Potential X11 forwarding vulnerabilities" -ForegroundColor Gray
        $issues++
    }
    
    # Check for strict host key checking
    if ($configContent -match "StrictHostKeyChecking") {
        Write-Host "‚úÖ Host key checking configured" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  WARNING: Host key checking not configured" -ForegroundColor Yellow
        Write-Host "   Risk: Vulnerable to man-in-the-middle attacks" -ForegroundColor Gray
        $issues++
    }
    
    return $issues
}

# Function to test SSH connection security
function Test-SshConnections {
    Write-Host ""
    Write-Host "üß™ Testing SSH connections to VCS providers..." -ForegroundColor Yellow
    
    $hosts = @("github.com", "gitlab.com", "bitbucket.org", "codeberg.org")
    
    foreach ($host in $hosts) {
        Write-Host "Testing $host`: " -NoNewline
        
        try {
            # Test SSH connection with timeout
            $result = & ssh -T -o ConnectTimeout=5 -o BatchMode=yes "git@$host" 2>&1
            
            if ($result -match "successfully authenticated|You've successfully authenticated") {
                Write-Host "‚úÖ Connected successfully" -ForegroundColor Green
            } elseif ($result -match "Permission denied") {
                Write-Host "‚úÖ Host reachable (authentication expected to fail)" -ForegroundColor Green
            } else {
                Write-Host "‚ö†Ô∏è  Connection failed or timeout" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "‚ö†Ô∏è  Connection test failed" -ForegroundColor Yellow
        }
    }
}

# Function to check for weak SSH keys
function Test-SshKeys {
    Write-Host ""
    Write-Host "üîë Checking SSH key security..." -ForegroundColor Yellow
    
    $weakKeys = 0
    $sshDir = Join-Path $env:USERPROFILE ".ssh"
    
    if (Test-Path $sshDir) {
        # Look for SSH keys with the new configurable naming pattern
        # Pattern: hostname-gituser-service-gituser
        $keyFiles = Get-ChildItem -Path $sshDir -Name "*-*-*-*" | Where-Object { 
            -not $_.EndsWith(".pub") 
        }
        
        foreach ($keyFile in $keyFiles) {
            $keyPath = Join-Path $sshDir $keyFile
            
            try {
                $keyInfo = & ssh-keygen -l -f $keyPath 2>$null
                if ($keyInfo) {
                    $parts = $keyInfo.Split(' ')
                    $keySize = $parts[0]
                    $keyType = $parts[3].Trim('()')
                    
                    switch ($keyType) {
                        "ED25519" {
                            Write-Host "‚úÖ $keyFile`: Ed25519 (quantum-resistant)" -ForegroundColor Green
                        }
                        "ECDSA" {
                            if ([int]$keySize -ge 256) {
                                Write-Host "‚úÖ $keyFile`: ECDSA-$keySize (secure)" -ForegroundColor Green
                            } else {
                                Write-Host "‚ö†Ô∏è  $keyFile`: ECDSA-$keySize (consider upgrading)" -ForegroundColor Yellow
                                $weakKeys++
                            }
                        }
                        "RSA" {
                            if ([int]$keySize -ge 2048) {
                                if ([int]$keySize -ge 4096) {
                                    Write-Host "‚úÖ $keyFile`: RSA-$keySize (secure)" -ForegroundColor Green
                                } else {
                                    Write-Host "‚ö†Ô∏è  $keyFile`: RSA-$keySize (consider Ed25519)" -ForegroundColor Yellow
                                }
                            } else {
                                Write-Host "‚ùå $keyFile`: RSA-$keySize (WEAK - upgrade immediately)" -ForegroundColor Red
                                $weakKeys++
                            }
                        }
                        default {
                            Write-Host "‚ùì $keyFile`: Unknown type ($keyType)" -ForegroundColor Magenta
                        }
                    }
                }
            } catch {
                Write-Host "‚ùì $keyFile`: Could not analyze key" -ForegroundColor Magenta
            }
        }
    }
    
    return $weakKeys
}

# Run security checks
$configIssues = Test-SshSecurity
$weakKeys = Test-SshKeys
Test-SshConnections

# Summary
Write-Host ""
Write-Host "üìä Security Summary" -ForegroundColor Cyan
Write-Host "===================" -ForegroundColor Cyan
Write-Host "Configuration issues: $configIssues"
Write-Host "Weak keys found: $weakKeys"

if ($configIssues -eq 0 -and $weakKeys -eq 0) {
    Write-Host "üéâ SSH configuration is secure!" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Security improvements recommended" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "üí° To improve security:" -ForegroundColor Cyan
    Write-Host "   1. Run 'chezmoi apply' to update SSH configuration"
    Write-Host "   2. Regenerate weak SSH keys with Ed25519: ssh-keygen -t ed25519"
    Write-Host "   3. Update VCS provider accounts with new public keys"
}
{{ end }}
