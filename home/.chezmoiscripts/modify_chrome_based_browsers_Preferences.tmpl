{{- /* chezmoi:modify-template */ -}}
{{/*
  This Chezmoi script manages Chrome-based browser Preferences.json files.
  It merges essential developer, privacy, and performance settings into existing preferences.
  
  Supported Chrome-based browsers:
    - Google Chrome (stable, beta, dev, canary)
    - Microsoft Edge
    - Brave Browser
    - Vivaldi
    - Opera (stable, GX)
    - Chromium
    - Chrome for Testing
  
  Key settings managed:
    - Developer tools preferences
    - Privacy and security settings
    - Performance optimizations
    - Extension management
    - UI/UX preferences
    - Password manager settings
  
  All other existing preferences will remain unchanged.
*/ -}}
{{- $CHROME_PREFS_JSON := .chezmoi.stdin -}}
{{- $current := dict -}}

{{/* Parse existing Preferences.json if file exists and has content */ -}}
{{- if $CHROME_PREFS_JSON -}}
  {{- $current = fromJson $CHROME_PREFS_JSON -}}
{{- end -}}

{{/* Define browser-specific settings based on the target path */ -}}
{{- $BROWSER_TYPE := "chrome" -}}
{{- $TARGET_PATH := .chezmoi.targetFile -}}
{{- if contains "brave" (lower $TARGET_PATH) -}}
  {{- $BROWSER_TYPE = "brave" -}}
{{- else if contains "edge" (lower $TARGET_PATH) -}}
  {{- $BROWSER_TYPE = "edge" -}}
{{- else if contains "vivaldi" (lower $TARGET_PATH) -}}
  {{- $BROWSER_TYPE = "vivaldi" -}}
{{- else if contains "opera" (lower $TARGET_PATH) -}}
  {{- $BROWSER_TYPE = "opera" -}}
{{- else if contains "chromium" (lower $TARGET_PATH) -}}
  {{- $BROWSER_TYPE = "chromium" -}}
{{- end -}}

{{/* Common settings for all Chrome-based browsers */ -}}
{{- $commonSettings := dict
  "browser" (dict
    "show_home_button" true
    "check_default_browser" false
    "has_seen_welcome_page" true
    "clear_lso_data_enabled" true
  )
  "profile" (dict
    "default_content_setting_values" (dict
      "notifications" 2
      "geolocation" 2
      "media_stream_mic" 2
      "media_stream_camera" 2
      "automatic_downloads" 2
      "mixed_script" 1
      "protocol_handlers" 2
      "ppapi_broker" 2
      "midi_sysex" 2
      "push_messaging" 2
      "ssl_cert_decisions" 1
      "metro_switch_to_desktop" 1
      "protected_media_identifier" 2
      "app_banner" 2
      "site_engagement" 1
      "durable_storage" 2
    )
    "password_manager_enabled" true
    "content_settings" (dict
      "exceptions" (dict
        "javascript" (dict)
        "plugins" (dict)
        "popups" (dict)
        "geolocation" (dict)
        "notifications" (dict)
        "auto_select_certificate" (dict)
        "fullscreen" (dict)
        "mouselock" (dict)
        "mixed_script" (dict)
        "media_stream" (dict)
        "media_stream_mic" (dict)
        "media_stream_camera" (dict)
        "protocol_handlers" (dict)
        "ppapi_broker" (dict)
        "automatic_downloads" (dict)
        "midi_sysex" (dict)
        "push_messaging" (dict)
        "ssl_cert_decisions" (dict)
        "metro_switch_to_desktop" (dict)
        "protected_media_identifier" (dict)
        "app_banner" (dict)
        "site_engagement" (dict)
        "durable_storage" (dict)
      )
    )
    "managed_user_id" ""
    "exit_type" "Normal"
    "exited_cleanly" true
  )
  "devtools" (dict
    "preferences" (dict
      "currentDockState" "\"right\""
      "InspectorView.splitViewState" (dict
        "vertical" (dict
          "size" 400
        )
        "horizontal" (dict
          "size" 400
        )
      )
      "console-timestamp" "true"
      "console-show-cors-errors" "true"
      "network-color-code-resource-types" "true"
      "network-group-by-frame" "true"
      "sources-disable-pause-on-exception-state" "\"DontPauseOnExceptions\""
      "elements-hide-user-agent-shadow-DOM" "false"
      "console-group-similar" "true"
      "console-show-settings-toolbar" "true"
      "network-log-preserve-log" "true"
      "console-preserve-log" "true"
      "cache-disabled" "true"
      "disable-javascript" "false"
      "emulation-touch" "false"
      "emulation-device-mode" "false"
    )
  )
  "extensions" (dict
    "theme" (dict
      "use_system" false
      "use_gtk_theme" false
      "id" ""
    )
    "settings" (dict)
  )
  "homepage" "chrome://newtab/"
  "homepage_is_newtabpage" true
  "session" (dict
    "restore_on_startup" 1
    "startup_urls" (list)
  )
  "bookmark_bar" (dict
    "show_on_all_tabs" false
  )
  "distribution" (dict
    "msi" true
    "system_level" true
    "verbose_logging" true
    "skip_first_run_ui" true
    "import_search_engine" false
    "import_history" false
    "import_bookmarks" false
    "import_home_page" false
    "create_all_shortcuts" true
    "do_not_launch_chrome" false
    "make_chrome_default" false
    "make_chrome_default_for_user" false
    "suppress_first_run_default_browser_prompt" true
  )
  "first_run_tabs" (list)
  "sync_promo" (dict
    "show_on_first_run_allowed" false
  )
-}}

{{/* Browser-specific additional settings */ -}}
{{- $browserSpecific := dict -}}
{{- if eq $BROWSER_TYPE "brave" -}}
  {{- $browserSpecific = dict
    "brave" (dict
      "stats_reporting_enabled" false
      "p3a_enabled" false
      "brave_ads_enabled" false
      "brave_rewards_enabled" false
      "brave_wallet_enabled" false
      "brave_vpn_enabled" false
      "brave_news_enabled" false
      "brave_today_enabled" false
    )
  -}}
{{- else if eq $BROWSER_TYPE "edge" -}}
  {{- $browserSpecific = dict
    "edge" (dict
      "prefs_version" 1
      "profile_info_cache" (dict)
    )
  -}}
{{- else if eq $BROWSER_TYPE "vivaldi" -}}
  {{- $browserSpecific = dict
    "vivaldi" (dict
      "address_bar_search" true
      "bookmarks_bar" true
      "start_page" "homepage"
    )
  -}}
{{- else if eq $BROWSER_TYPE "opera" -}}
  {{- $browserSpecific = dict
    "opera" (dict
      "sidebar_enabled" true
      "workspaces_enabled" true
      "vpn_enabled" false
      "ad_blocker_enabled" true
    )
  -}}
{{- end -}}

{{/* Merge all settings: current -> common -> browser-specific */ -}}
{{- $merged := mergeOverwrite $current $commonSettings -}}
{{- $merged = mergeOverwrite $merged $browserSpecific -}}

{{/* Output the merged JSON */ -}}
{{ toPrettyJson $merged }}
