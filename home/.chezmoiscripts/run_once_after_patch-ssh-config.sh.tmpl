#!/usr/bin/env bash
set -euo pipefail

CONFIG_FILE="${HOME}/.ssh/config"

mkdir -p "${HOME}/.ssh"
chmod 700 "${HOME}/.ssh" 2>/dev/null || true
: > /dev/null

# Create if missing
if [[ ! -f "${CONFIG_FILE}" ]]; then
  : > "${CONFIG_FILE}"
fi

# Desired defaults to reconcile inside the first 'Host *' block
DESIRED=$(cat <<'EOF'
Protocol 2
StrictHostKeyChecking ask
HashKnownHosts yes
IdentitiesOnly yes
Compression yes
ForwardAgent no
ForwardX11 no
# Modern crypto defaults
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512,hmac-sha2-256
HostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256
PubkeyAcceptedAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256
EOF
)

tmp=$(mktemp)
awkfile=$(mktemp)
trap 'rm -f "$tmp" "$awkfile"' EXIT

cat > "$awkfile" <<'AWK'
#!/usr/bin/awk -f
BEGIN {
  OFS="\t"
  split(desiredLines, arr, "\n");
  for (i in arr) {
    if (length(arr[i]) == 0) continue;
    # split only on first space into key and value
    sp = index(arr[i], " ");
    if (sp == 0) { key = arr[i]; val = ""; }
    else { key = substr(arr[i], 1, sp-1); val = substr(arr[i], sp+1); }
    desired[key] = val;
    order[++n] = key;
  }
}

function emit_missing(indent) {
  for (i = 1; i <= n; i++) {
    k = order[i];
    if (!seen[k]) {
      if (desired[k] == "") printf "%s%s\n", indent, k; else printf "%s%s %s\n", indent, k, desired[k];
    }
  }
}

{
  line = $0;
  if (!foundHostStar && match(line, /^[Hh]ost[ \t]+\*\s*$/)) {
    foundHostStar = 1;
    inHostStar = 1;
    print line;
    next;
  }

  # entering another Host block ends Host *
  if (inHostStar && match(line, /^[Hh]ost[ \t]+/)) {
    emit_missing("\t");
    inHostStar = 0;
    print line;
    next;
  }

  if (inHostStar) {
    # skip blank lines and comments inside Host *
    if (line ~ /^[ \t]*$/ || line ~ /^[ \t]*#/) { print line; next; }
    # trim leading whitespace
    sub(/^[ \t]+/, "", line)
    # split on whitespace to get the key
    nfields = split(line, parts, /[ \t]+/)
    key = parts[1]
    if (key in desired) {
      seen[key] = 1
      # Preserve user's existing value; do not replace.
      # Print the original line as-is.
      print $0;
      next;
    }
  }

  print line;
}

END {
  if (inHostStar) {
    emit_missing("\t");
  }
  if (!foundHostStar) {
    # append a Host * block with desired lines
    print "";
    print "Host *";
    for (i = 1; i <= n; i++) {
      k = order[i];
      if (desired[k] == "") print "\t" k; else print "\t" k " " desired[k];
    }
  }
}
AWK

awk -v desiredLines="$DESIRED" -f "$awkfile" "${CONFIG_FILE}" > "$tmp"

mv "$tmp" "${CONFIG_FILE}"
chmod 600 "${CONFIG_FILE}" 2>/dev/null || true
