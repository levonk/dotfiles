#!/bin/bash
# Generate SSH keys for VCS providers if they don't exist
# This script runs once before chezmoi applies configurations

set -euo pipefail

# Get hostname and git user for key naming
# Git user can be overridden via CHEZMOI_GIT_USER environment variable
HOSTNAME="{{ .chezmoi.hostname }}"
GIT_USER="{{ env "CHEZMOI_GIT_USER" | default .chezmoi.username | default (env "USER") | default (env "USERNAME") | default "user" }}"
SSH_DIR="$HOME/.ssh"

# Ensure SSH directory exists with correct permissions
mkdir -p "$SSH_DIR"
chmod 700 "$SSH_DIR"

# Function to generate SSH key if it doesn't exist
generate_ssh_key() {
    local service="$1"
    local comment="$2"
    local key_path="$SSH_DIR/${HOSTNAME}-${GIT_USER}-${service}-${GIT_USER}"
    
    if [[ ! -f "$key_path" ]]; then
        echo "Generating Ed25519 SSH key for $service..."
        ssh-keygen -t ed25519 -f "$key_path" -C "$comment" -N ""
        chmod 600 "$key_path"
        chmod 644 "${key_path}.pub"
        echo "‚úÖ Generated SSH key: $key_path"
        echo "üìã Public key for $service:"
        cat "${key_path}.pub"
        echo ""
    else
        echo "‚úÖ SSH key already exists: $key_path"
    fi
}

# Generate keys for all VCS providers (alphabetical order)
echo "üîë Generating SSH keys for VCS providers..."
echo "Hostname: $HOSTNAME"
echo "Git User: $GIT_USER"
echo ""

generate_ssh_key "bitbucket" "${HOSTNAME}-${GIT_USER}@bitbucket.org"
generate_ssh_key "codeberg" "${HOSTNAME}-${GIT_USER}@codeberg.org"
generate_ssh_key "gitea" "${HOSTNAME}-${GIT_USER}@gitea.com"
generate_ssh_key "github" "${HOSTNAME}-${GIT_USER}@github.com"
generate_ssh_key "gitlab" "${HOSTNAME}-${GIT_USER}@gitlab.com"
generate_ssh_key "launchpad" "${HOSTNAME}-${GIT_USER}@launchpad.net"
generate_ssh_key "sourceforge" "${HOSTNAME}-${GIT_USER}@sourceforge.net"

echo "üéâ SSH key generation complete!"
echo ""
echo "üìù Next steps:"
echo "1. Add the public keys to your VCS provider accounts"
echo "2. Test SSH connections: ssh -T git@github.com"
echo "3. Use the host aliases in git remotes: git@github-l:user/repo.git"
